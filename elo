#!/usr/bin/env python3

import sys, csv
import statistics as stat
from collections import defaultdict as dd

# This value seems fairly standard if a global k-factor is to be used
global_k = 32

if __name__ == "__main__":
    for arg in sys.argv[1:]: # For each input csv file (argv[0] is this program)

        players = dd() # Player dictionary

        # Default factory
        def df():
            if players == {}:
                return [1000] # The first player starts at 1000
            # Every other new player starts at the average ranking
            return [stat.mean([rankings[-1] for rankings in players.values()])]

        players.default_factory = df # Hook up the player dict to the default factory

        with open(arg) as file:
            reader = csv.reader(file)
            for winner, loser in reader: # Iterate match-by-match
                # Most recent ratings
                winner_rating = players[winner][-1]
                loser_rating = players[loser][-1]

                # Currently k-factor is global, but could instead be based on
                # rating and number of matches played
                winner_k = global_k
                loser_k = global_k

                # Expectation
                expected_outcome = 1 / (1 + 10**((loser_rating - winner_rating)/400))

                # Update ratings
                players[winner].append(winner_rating + winner_k*(1 - expected_outcome))
                players[loser].append(loser_rating + loser_k*(expected_outcome - 1))

            # Print current ratings in descending order
            for player, ratings in sorted(players.items(), key=lambda x: x[1][-1], reverse=True):
                print(player, ratings[-1])
